pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'willisrunner/fiveg_app'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ngoamenye/5G-mm-waves-throughput-prediction.git'
            }
        }
        
        // Skipping the Install Dependencies stage
        // CI Checks are still kept, without installing requirements

        stage('CI Checks') {
            steps {
                script {
                    echo "Running Black formatting..."
                    sh 'black backend/'

                    echo "Running Flake8 for code linting..."
                    sh 'flake8 backend/'

                    echo "Running Bandit for security checks..."
                    sh 'bandit -r backend/'

                    echo "Running tests..."
                    sh 'pytest backend/'  // Adjust if you have tests in specific directories
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', '2353df0d-c9ae-4a8d-9b5b-931e9659d601') {
                        sh 'docker build -t ${DOCKER_IMAGE}:latest .'
                        sh 'docker tag ${DOCKER_IMAGE}:latest ${DOCKER_IMAGE}:${BUILD_NUMBER}'
                        sh 'docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}'
                    }
                }
            }
        }

        stage('MLflow Logging') {
            steps {
                script {
                    // Ensure the model training script exists and path is correct
                    sh 'python3 backend/ml/train.py' 
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Ensure docker-compose.yml is available and valid
                    sh 'docker-compose up -d'
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
